# This CloudFormation template deploys a basic VPC / Network.

---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Creates a VPC with public subnets for a given AWS Account.

Parameters:
  VpcCidrParam:
    Type: String
    Description: VPC CIDR. For more info, see http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html#VPC_Sizing
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  Public1SubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  Public2SubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  Public3SubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  Subnet1RegionParameter: 
    Type: String
    AllowedValues: 
      - us-east-1a
      - us-east-1b
      - us-east-1c
    Description: Enter AWS region for subnets.

  Subnet2RegionParameter: 
    Type: String
    AllowedValues: 
      - us-east-1a
      - us-east-1b
      - us-east-1c
    Description: Enter AWS region for subnets.

  Subnet3RegionParameter: 
    Type: String
    AllowedValues: 
      - us-east-1a
      - us-east-1b
      - us-east-1c
    Description: Enter AWS region for subnets.

  VpcNameParameter: 
    Type: String
    Description: Enter VPC name.

  DBName:
    Default: "acc_data"
    Description: "This is my database name"
    Type: "String"

  DBUsername:
    Default: "root"
    Description: "The database admin account username"
    Type: "String"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  DBPassword:
    Default: "Comp23329002"
    Description: "The database admin account password"
    Type: "String"
    AllowedPattern: "[a-zA-Z0-9]*"


Resources:
  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrParam
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref VpcNameParameter

  # Our VPC will need internet access:     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet1RegionParameter
      CidrBlock: !Ref Public1SubnetBlock
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet2RegionParameter
      CidrBlock: !Ref Public2SubnetBlock
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-2

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet3RegionParameter
      CidrBlock: !Ref Public3SubnetBlock
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-3


  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


# Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable


###########################

  WebappSec:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: String
          Value: String

  RDSSec:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebappSec

      Tags:
        - Key: String
          Value: String

  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      EngineVersion: 5.6
      MasterUsername: !Ref DBUsername #parameter
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref myDBSubnetGroup
      DBInstanceIdentifier: "csye6225-spring2020"
      VPCSecurityGroups:
        - !Ref RDSSec
      PubliclyAccessible: "false"
      MultiAZ: "false"
      Port: "3306"
      StorageType: gp2
      Tags:
        - Key: String
          Value: String

  Bucket: # cannot be deleted with data
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Transition:
              TransitionInDays: 30
              StorageClass: "STANDARD_IA"


  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'


  WebAppS3:
    DependsOn:
      - EC2Role
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:*"
            Resource:
              - !Join ['', ['arn:aws:s3:::*']]
      Roles:
        - !Ref EC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: DjangoEC2InstanceProfile
      Path: "/"
      Roles:
        - !Ref EC2Role


  DjangoEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: AttachGateway
    Properties:
      ImageId: ami-00709082e30c244e5 #parameter??dynamic-entry??
      InstanceType: t2.micro #parameter
      KeyName: aws_nishanth #parameter
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet3
          DeleteOnTermination: true
          GroupSet:
            - !Ref WebappSec
      Tags:
        - Key: Name
          Value: myInstance
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash\n"
              - "cd /home/ubuntu\n"
              - "touch .bashrc\n"
              - "echo $'export DB_HOST=\""
              - !GetAtt MyDB.Endpoint.Address
              - "\"\n' >> .bashrc"
              - "echo $'export DB_USERNAME=\""
              - !Ref DBUsername
              - "\"\n' >> .bashrc"
              - "echo $'export DB_PASSWORD=\""
              - !Ref DBPassword
              - "\"\n' >> .bashrc"
              - "echo $'export S3_BUCKET_NAME=\""
              - !Ref Bucket
              - "\"\n' >> .bashrc"
              - "echo $'export DB_NAME=\""
              - !Ref DBName
              - "\"\n' >> .bashrc"