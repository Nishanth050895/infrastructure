# This CloudFormation template deploys a basic VPC / Network.

---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Creates a VPC with public subnets for a given AWS Account.

Parameters:
  VpcCidrParam:
    Type: String
    Description: VPC CIDR. For more info, see http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html#VPC_Sizing
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  Public1SubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  Public2SubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  Public3SubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  Subnet1RegionParameter: 
    Type: String
    AllowedValues: 
      - us-east-1a
      - us-east-1b
      - us-east-1c
    Description: Enter AWS region for subnets.

  Subnet2RegionParameter: 
    Type: String
    AllowedValues: 
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-2a
      - us-east-2b
      - us-east-2c
    Description: Enter AWS region for subnets.

  Subnet3RegionParameter: 
    Type: String
    AllowedValues: 
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-2a
      - us-east-2b
      - us-east-2c
    Description: Enter AWS region for subnets.

  VpcNameParameter: 
    Type: String
    Description: Enter VPC name.

  DBName:
    Default: "acc_data"
    Description: "This is my database name"
    Type: "String"

  DBUsername:
    Default: "root"
    Description: "The database admin account username"
    Type: "String"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  DBPassword:
    Default: "Comp23329002"
    Description: "The database admin account password"
    Type: "String"
    AllowedPattern: "[a-zA-Z0-9]*"

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.

  CustomAMI:
    Type: String
    Description: Enter AMI name.

  MyDBInstanceIdentifier:
    Type: String
    Description: Enter DBInstanceIdentifier name.

  MySSHKeyName:
    Type: String
    Description: Enter DBInstanceIdentifier name.

  RDSPublicAccess:
    Type: String
    Description: Enter RDSPublicAccess boolean value.

  RDSInstanceTypeParameter:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t2.micro
    Description: Enter db.t3.micro.

  RDSInstanceSize:
    Type: String
    Description: Enter RDSInstanceSize value.

  EC2Name:
    Type: String
    Default: "csye6225-EC2-Key-Name"

  EC2Value:
    Type: String
    Default: "csye6225-EC2"

  S3CodeBucket:
    Type: String
    Description: Enter S3 Bucket name where we store our code.

  AccountId:
    Type: String
    Description: AWS account id.

  ResourceRegion:
    Type: String
    Description: CodeDeploy region.

  AWSCodeDeployApplicationName:
    Type: String
    Description: AWS CodeDeployApplicationName.

  AWSDeploymentGroupName:
    Type: String
    Description: DeploymentGroupName.

Resources:
  #VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrParam
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref VpcNameParameter

  # Our VPC will need internet access:     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet1RegionParameter
      CidrBlock: !Ref Public1SubnetBlock
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet2RegionParameter
      CidrBlock: !Ref Public2SubnetBlock
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-2

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet3RegionParameter
      CidrBlock: !Ref Public3SubnetBlock
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-3


  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


# Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable


  WebappSec:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: String
          Value: String

  RDSSec:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebappSec

      Tags:
        - Key: String
          Value: String

  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref RDSInstanceSize #
      DBInstanceClass: !Ref RDSInstanceTypeParameter
      Engine: MySQL
      EngineVersion: 5.6
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref myDBSubnetGroup
      DBInstanceIdentifier: !Ref MyDBInstanceIdentifier
      VPCSecurityGroups:
        - !Ref RDSSec
      PubliclyAccessible: !Ref RDSPublicAccess
      MultiAZ: "false"
      Port: "3306"
      StorageType: gp2
      Tags:
        - Key: String
          Value: String

  Bucket: # cannot be deleted with data
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Transition:
              TransitionInDays: 30
              StorageClass: "STANDARD_IA"


  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'


  WebAppS3:
    DependsOn:
      - EC2Role
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:DeleteObject
              - s3:DeleteObjectAcl
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:ListObject
              - s3:ListObjectAcl
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref Bucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref Bucket, '/*']]
      Roles:
        - !Ref EC2Role


  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'codedeploy.amazonaws.com'
            Action: 'sts:AssumeRole'


  AWSCodeDeployRole:
    DependsOn:
      - CodeDeployServiceRole
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AWSCodeDeployRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DeleteLifecycleHook
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:PutLifecycleHook
              - autoscaling:RecordLifecycleActionHeartbeat
              - autoscaling:CreateAutoScalingGroup
              - autoscaling:UpdateAutoScalingGroup
              - autoscaling:EnableMetricsCollection
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribePolicies
              - autoscaling:DescribeScheduledActions
              - autoscaling:DescribeNotificationConfigurations
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:SuspendProcesses
              - autoscaling:ResumeProcesses
              - autoscaling:AttachLoadBalancers
              - autoscaling:PutScalingPolicy
              - autoscaling:PutScheduledUpdateGroupAction
              - autoscaling:PutNotificationConfiguration
              - autoscaling:PutLifecycleHook
              - autoscaling:DescribeScalingActivities
              - autoscaling:DeleteAutoScalingGroup
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - ec2:TerminateInstances
              - tag:GetResources
              - sns:Publish
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeInstanceHealth
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource:
              - "*"
      Roles:
        - !Ref CodeDeployServiceRole


  CodeDeployEC2S3:
    DependsOn:
      - EC2Role
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CodeDeployEC2S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref S3CodeBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref S3CodeBucket, '/*']]
      Roles:
        - !Ref EC2Role


  CircleCIUploadToS3:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CircleCIUploadToS3
      Users:
        - circleci
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:Get*
              - s3:List*
              - s3:PutObject
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref S3CodeBucket]]  #which resource change bucket name
              - !Join ['', ['arn:aws:s3:::', !Ref S3CodeBucket, '/*']]   #which resource change bucket name


  CircleCICodeDeploy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CircleCICodeDeploy
      Users:
        - circleci
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - codedeploy:RegisterApplicationRevision
              - codedeploy:GetApplicationRevision
            Resource:
              - !Sub 'arn:aws:codedeploy:${ResourceRegion}:${AccountId}:application:${AWSCodeDeployApplicationName}'
          - Effect: "Allow"
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetDeployment
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - codedeploy:GetDeploymentConfig
            Resource:
              - !Sub 'arn:aws:codedeploy:${ResourceRegion}:${AccountId}:deploymentconfig:CodeDeployDefault.OneAtATime'
              - !Sub 'arn:aws:codedeploy:${ResourceRegion}:${AccountId}:deploymentconfig:CodeDeployDefault.HalfAtATime'
              - !Sub 'arn:aws:codedeploy:${ResourceRegion}:${AccountId}:deploymentconfig:CodeDeployDefault.AllAtOnce'


  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: DjangoEC2InstanceProfile
      Path: "/"
      Roles:
        - !Ref EC2Role


  DjangoEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: AttachGateway
    Properties:
      ImageId: !Ref CustomAMI
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref MySSHKeyName
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet3
          DeleteOnTermination: true
          GroupSet:
            - !Ref WebappSec
      Tags:
        - Key: !Ref EC2Name
          Value: !Ref EC2Value
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash\n"
              - "cd /etc/\n"
              - "sudo apt-get -y install libmysqlclient-dev\n"
              - "sudo pip3 install mysqlclient\n"
              - "sudo pip3 install django_mysql\n"
              - "sudo pip3 install pymysql\n"
              - "echo $'export DB_HOST=\""
              - !GetAtt MyDB.Endpoint.Address
              - "\"\n' >> environment"
              - "echo $'export DB_USERNAME=\""
              - !Ref DBUsername
              - "\"\n' >> environment"
              - "echo $'export DB_PASSWORD=\""
              - !Ref DBPassword
              - "\"\n' >> environment"
              - "echo $'export S3_BUCKET_NAME=\""
              - !Ref Bucket
              - "\"\n' >> environment"
              - "echo $'export DB_NAME=\""
              - !Ref DBName
              - "\"\n' >> environment"


  CodeDeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Ref AWSCodeDeployApplicationName
      ComputePlatform: "Server"


  CodeDeployApplicationGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoRollbackConfiguration:
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: !Ref AWSDeploymentGroupName
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      Ec2TagFilters:
        - Key: !Ref EC2Name
          Value: !Ref EC2Value
          Type: KEY_AND_VALUE
      ServiceRoleArn:
        Fn::GetAtt: [ CodeDeployServiceRole, Arn ]